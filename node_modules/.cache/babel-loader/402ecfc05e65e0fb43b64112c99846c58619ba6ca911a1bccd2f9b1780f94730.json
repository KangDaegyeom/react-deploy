{"ast":null,"code":"var _jsxFileName = \"/Users/kangdaegyeom/Documents/grepp-react/src/pages/Game.js\",\n  _s = $RefreshSig$();\n// 컴포넌트\n// 클래스형 컴포넌트 (백만년 전에 쓰던거)\n// 함수형 컴포넌트\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n  const xIsNext = currentMove % 2 === 0;\n  const winner = calculateWinner(currentSquares);\n  useEffect(() => {\n    console.log('게임이 시작되었습니다!');\n    let timerId;\n    if (!winner) {\n      let count = 1;\n      timerId = setInterval(() => {\n        document.querySelector('#timer').textContent = count++ + '초';\n      }, 1000);\n    }\n\n    // 클린업 함수 (컴포넌트 언마운트 시 또는 의존성이 변경되어 다시 실행되기 전에 호출)\n    return () => {\n      console.log('게임 컴포넌트가 정리됩니다.');\n      clearInterval(timerId);\n    };\n  }, [winner]);\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // 동적으로 생성되거나 순서가 변경될 수 있는 리스트 항목들을 효율적으로 식별하기 위해 react-key 가 필요\n  // 보통 데이터 자체 id 사용\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"timer\",\n      children: \"Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          xIsNext: xIsNext,\n          squares: currentSquares,\n          onPlay: handlePlay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"ai3FHCH3Ore5vNuhgmppeufaxkQ=\");\n_c = Game;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  // \"특정 이벤트가 발생했을 때 자동으로 어떤 동작을 실행하도록 연결(hook into)하는 메커니즘\"\n  // 웹훅은 특정 웹 서비스에서 어떤 이벤트가 발생했을 때, 미리 지정된 다른 서비스의 URL로 HTTP POST 요청을 보내는 방식\n  // ex) git action : github 에 push => 배포되어야 하는 서버의 ssh 에 특정 명령어를 전달\n\n  // Hooks의 두 가지 주요 규칙\n  // 최상위(Top-Level)에서만 호출해야 합니다.\n  //\n  // useState를 포함한 모든 Hooks는 React 함수형 컴포넌트의 최상위 레벨에서만 호출해야 합니다.\n  // 이는 조건문(if), 반복문(for/while), 중첩된 함수 안에서는 Hooks를 호출할 수 없다는 의미입니다.\n  // React 함수형 컴포넌트나 커스텀 Hook에서만 호출해야 합니다.\n  //\n  // Hooks는 일반 자바스크립트 함수에서는 호출할 수 없고, 오직 React 함수형 컴포넌트나 직접 만든 커스텀 Hook 안에서만 호출해야 합니다.\n  // React가 상태를 예측 가능하게 관리하도록 하기 위해, Hooks는 항상 동일한 순서로 호출되어야 함\n\n  function handleClick(i) {\n    // 새로운 배열 생성, 객체의 주소가 바뀌었음으로 state 가 동작\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// 객체를 매개변수로 받아서 value 라는 변수에 구조분해할당 (비구조화할당)\n_c2 = Board;\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 10\n  }, this);\n}\n_c3 = Square;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Square\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","xIsNext","winner","calculateWinner","console","log","timerId","count","setInterval","document","querySelector","textContent","clearInterval","handlePlay","nextSquares","nextHistory","slice","length","jumpTo","nextMove","moves","map","squares","move","description","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","className","Board","onPlay","_c","status","handleClick","i","Square","value","onSquareClick","_c2","_c3","lines","a","b","c","$RefreshReg$"],"sources":["/Users/kangdaegyeom/Documents/grepp-react/src/pages/Game.js"],"sourcesContent":["// 컴포넌트\n// 클래스형 컴포넌트 (백만년 전에 쓰던거)\n// 함수형 컴포넌트\nimport {useEffect, useState} from \"react\";\n\nexport default function Game() {\n\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n  const xIsNext = currentMove % 2 === 0\n  const winner = calculateWinner(currentSquares);\n\n  useEffect(() => {\n    console.log('게임이 시작되었습니다!');\n    let timerId;\n\n    if(!winner){\n      let count = 1;\n      timerId = setInterval(() => {\n        document.querySelector('#timer').textContent = count++ + '초'\n      },1000)\n    }\n\n    // 클린업 함수 (컴포넌트 언마운트 시 또는 의존성이 변경되어 다시 실행되기 전에 호출)\n    return () => {\n      console.log('게임 컴포넌트가 정리됩니다.');\n      clearInterval(timerId)\n    };\n  }, [winner]);\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // 동적으로 생성되거나 순서가 변경될 수 있는 리스트 항목들을 효율적으로 식별하기 위해 react-key 가 필요\n  // 보통 데이터 자체 id 사용\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      <h2 id=\"timer\">Timer</h2>\n      <div className=\"game\">\n\n        <div className=\"game-board\">\n          <Board xIsNext={xIsNext} squares={currentSquares}\n                 onPlay={handlePlay}/>\n        </div>\n        <div className=\"game-info\">\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction Board({xIsNext, squares, onPlay}) {\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  // \"특정 이벤트가 발생했을 때 자동으로 어떤 동작을 실행하도록 연결(hook into)하는 메커니즘\"\n  // 웹훅은 특정 웹 서비스에서 어떤 이벤트가 발생했을 때, 미리 지정된 다른 서비스의 URL로 HTTP POST 요청을 보내는 방식\n  // ex) git action : github 에 push => 배포되어야 하는 서버의 ssh 에 특정 명령어를 전달\n\n  // Hooks의 두 가지 주요 규칙\n  // 최상위(Top-Level)에서만 호출해야 합니다.\n  //\n  // useState를 포함한 모든 Hooks는 React 함수형 컴포넌트의 최상위 레벨에서만 호출해야 합니다.\n  // 이는 조건문(if), 반복문(for/while), 중첩된 함수 안에서는 Hooks를 호출할 수 없다는 의미입니다.\n  // React 함수형 컴포넌트나 커스텀 Hook에서만 호출해야 합니다.\n  //\n  // Hooks는 일반 자바스크립트 함수에서는 호출할 수 없고, 오직 React 함수형 컴포넌트나 직접 만든 커스텀 Hook 안에서만 호출해야 합니다.\n  // React가 상태를 예측 가능하게 관리하도록 하기 위해, Hooks는 항상 동일한 순서로 호출되어야 함\n\n  function handleClick(i) {\n    // 새로운 배열 생성, 객체의 주소가 바뀌었음으로 state 가 동작\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n\n    onPlay(nextSquares)\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)}/>\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)}/>\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)}/>\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)}/>\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)}/>\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)}/>\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)}/>\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)}/>\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)}/>\n      </div>\n    </>\n  )\n}\n\n// 객체를 매개변수로 받아서 value 라는 변수에 구조분해할당 (비구조화할당)\nfunction Square({value, onSquareClick}) {\n  return <button className=\"square\"\n                 onClick={onSquareClick}\n  >{value}</button>\n}\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}